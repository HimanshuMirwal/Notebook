'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var PropTypes = _interopDefault(require('prop-types'));
var react = require('react');

var useBeforeunload = function useBeforeunload(handler) {
  if (handler === void 0) {
    handler = function handler() {};
  }

  if (process.env.NODE_ENV !== 'production' && typeof handler !== 'function') {
    throw new TypeError("Expected \"handler\" to be a function, not " + typeof handler + ".");
  }

  var handlerRef = react.useRef(handler);
  react.useEffect(function () {
    handlerRef.current = handler;
  }, [handler]);
  react.useEffect(function () {
    var handleBeforeunload = function handleBeforeunload(event) {
      var returnValue;

      if (typeof handlerRef.current === 'function') {
        returnValue = handlerRef.current(event);
      }

      if (event.defaultPrevented) {
        event.returnValue = '';
      }

      if (typeof returnValue === 'string') {
        event.returnValue = returnValue;
        return returnValue;
      }
    };

    window.addEventListener('beforeunload', handleBeforeunload);
    return function () {
      window.removeEventListener('beforeunload', handleBeforeunload);
    };
  }, []);
};

var Beforeunload = function Beforeunload(props) {
  useBeforeunload(props.onBeforeunload);
  return props.children;
};

Beforeunload.defaultProps = {
  children: null
};
Beforeunload.propTypes = {
  children: PropTypes.any,
  onBeforeunload: PropTypes.func.isRequired
};

exports.Beforeunload = Beforeunload;
exports.useBeforeunload = useBeforeunload;
