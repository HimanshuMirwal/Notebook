{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { useRef, useEffect } from 'react';\n\nvar useBeforeunload = function useBeforeunload(handler) {\n  if (handler === void 0) {\n    handler = function handler() {};\n  }\n\n  if (process.env.NODE_ENV !== 'production' && typeof handler !== 'function') {\n    throw new TypeError(\"Expected \\\"handler\\\" to be a function, not \" + typeof handler + \".\");\n  }\n\n  var handlerRef = useRef(handler);\n  useEffect(function () {\n    handlerRef.current = handler;\n  }, [handler]);\n  useEffect(function () {\n    var handleBeforeunload = function handleBeforeunload(event) {\n      var returnValue;\n\n      if (typeof handlerRef.current === 'function') {\n        returnValue = handlerRef.current(event);\n      }\n\n      if (event.defaultPrevented) {\n        event.returnValue = '';\n      }\n\n      if (typeof returnValue === 'string') {\n        event.returnValue = returnValue;\n        return returnValue;\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeunload);\n    return function () {\n      window.removeEventListener('beforeunload', handleBeforeunload);\n    };\n  }, []);\n};\n\nvar Beforeunload = function Beforeunload(props) {\n  useBeforeunload(props.onBeforeunload);\n  return props.children;\n};\n\nBeforeunload.defaultProps = {\n  children: null\n};\nBeforeunload.propTypes = {\n  children: PropTypes.any,\n  onBeforeunload: PropTypes.func.isRequired\n};\nexport { Beforeunload, useBeforeunload };","map":{"version":3,"sources":["E:/web developement/ReactApp/Notebook/node_modules/react-beforeunload/lib/index.esm.js"],"names":["PropTypes","useRef","useEffect","useBeforeunload","handler","process","env","NODE_ENV","TypeError","handlerRef","current","handleBeforeunload","event","returnValue","defaultPrevented","window","addEventListener","removeEventListener","Beforeunload","props","onBeforeunload","children","defaultProps","propTypes","any","func","isRequired"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;;AAEA,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AACtD,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,SAASA,OAAT,GAAmB,CAAE,CAA/B;AACD;;AAED,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,OAAOH,OAAP,KAAmB,UAAhE,EAA4E;AAC1E,UAAM,IAAII,SAAJ,CAAc,gDAAgD,OAAOJ,OAAvD,GAAiE,GAA/E,CAAN;AACD;;AAED,MAAIK,UAAU,GAAGR,MAAM,CAACG,OAAD,CAAvB;AACAF,EAAAA,SAAS,CAAC,YAAY;AACpBO,IAAAA,UAAU,CAACC,OAAX,GAAqBN,OAArB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAGAF,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIS,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,KAA5B,EAAmC;AAC1D,UAAIC,WAAJ;;AAEA,UAAI,OAAOJ,UAAU,CAACC,OAAlB,KAA8B,UAAlC,EAA8C;AAC5CG,QAAAA,WAAW,GAAGJ,UAAU,CAACC,OAAX,CAAmBE,KAAnB,CAAd;AACD;;AAED,UAAIA,KAAK,CAACE,gBAAV,EAA4B;AAC1BF,QAAAA,KAAK,CAACC,WAAN,GAAoB,EAApB;AACD;;AAED,UAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACnCD,QAAAA,KAAK,CAACC,WAAN,GAAoBA,WAApB;AACA,eAAOA,WAAP;AACD;AACF,KAfD;;AAiBAE,IAAAA,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwCL,kBAAxC;AACA,WAAO,YAAY;AACjBI,MAAAA,MAAM,CAACE,mBAAP,CAA2B,cAA3B,EAA2CN,kBAA3C;AACD,KAFD;AAGD,GAtBQ,EAsBN,EAtBM,CAAT;AAuBD,CApCD;;AAsCA,IAAIO,YAAY,GAAG,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAC9ChB,EAAAA,eAAe,CAACgB,KAAK,CAACC,cAAP,CAAf;AACA,SAAOD,KAAK,CAACE,QAAb;AACD,CAHD;;AAKAH,YAAY,CAACI,YAAb,GAA4B;AAC1BD,EAAAA,QAAQ,EAAE;AADgB,CAA5B;AAGAH,YAAY,CAACK,SAAb,GAAyB;AACvBF,EAAAA,QAAQ,EAAErB,SAAS,CAACwB,GADG;AAEvBJ,EAAAA,cAAc,EAAEpB,SAAS,CAACyB,IAAV,CAAeC;AAFR,CAAzB;AAKA,SAASR,YAAT,EAAuBf,eAAvB","sourcesContent":["import PropTypes from 'prop-types';\nimport { useRef, useEffect } from 'react';\n\nvar useBeforeunload = function useBeforeunload(handler) {\n  if (handler === void 0) {\n    handler = function handler() {};\n  }\n\n  if (process.env.NODE_ENV !== 'production' && typeof handler !== 'function') {\n    throw new TypeError(\"Expected \\\"handler\\\" to be a function, not \" + typeof handler + \".\");\n  }\n\n  var handlerRef = useRef(handler);\n  useEffect(function () {\n    handlerRef.current = handler;\n  }, [handler]);\n  useEffect(function () {\n    var handleBeforeunload = function handleBeforeunload(event) {\n      var returnValue;\n\n      if (typeof handlerRef.current === 'function') {\n        returnValue = handlerRef.current(event);\n      }\n\n      if (event.defaultPrevented) {\n        event.returnValue = '';\n      }\n\n      if (typeof returnValue === 'string') {\n        event.returnValue = returnValue;\n        return returnValue;\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeunload);\n    return function () {\n      window.removeEventListener('beforeunload', handleBeforeunload);\n    };\n  }, []);\n};\n\nvar Beforeunload = function Beforeunload(props) {\n  useBeforeunload(props.onBeforeunload);\n  return props.children;\n};\n\nBeforeunload.defaultProps = {\n  children: null\n};\nBeforeunload.propTypes = {\n  children: PropTypes.any,\n  onBeforeunload: PropTypes.func.isRequired\n};\n\nexport { Beforeunload, useBeforeunload };\n"]},"metadata":{},"sourceType":"module"}